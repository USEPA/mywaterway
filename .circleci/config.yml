
version: 2.1
orbs:
  aws-s3: circleci/aws-s3@3.0
jobs:
  develop-branch:
    working_directory: ~/project/app # directory where steps will run
    docker:
      - image: cimg/node:18.7.0
    resource_class: large
    environment:
      APP_NAME: mywaterway-dev
      APP_DOMAIN: app.cloud.gov
    steps:
      - checkout:
          path: ~/project
      - run:
          name: install python
          command: |
            sudo apt-get update
            sudo apt-get install python3.8
            sudo apt-get install python3.8-venv
      - run:
          name: set python to python3
          command: 'sudo apt-get install python-is-python3'
      - run:
          name: check python version
          command: 'python --version'
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - run:
          name: Check npm version
          command: |
            npm --version
      - run:
          name: Check node version
          command: |
            node --version
      - run:
          name: client build
          command: |
            cd client
            npm install --legacy-peer-deps
            npm run build
      - run:
          name: server build 
          command: |
            cd server
            npm install
            cd app
            cd public
            cp -a ../../../client/build/. .
      - run:
          name: Setup Cloud Foundry CLI
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
            cf api https://api.fr.cloud.gov  
            cf auth "$CF_USER_DEV" "$CF_PASSWORD_DEV"
            cf target -o "$CF_ORG" -s "$CF_SPACE_DEV"
      - run:
          name: Deploy application to Cloud.gov
          command: |
            cd server
            cf push --no-start $APP_NAME-green -f ../manifest-dev.yml -p . -n $APP_NAME-green 
            cf set-env $APP_NAME-green GLOSSARY_AUTH "$GLOSSARY_AUTH"
            cf set-env $APP_NAME-green HMW_BASIC_USER_NAME "$HMW_BASIC_USER_NAME"
            cf set-env $APP_NAME-green HMW_BASIC_USER_PWD "$HMW_BASIC_USER_PWD"
      - run:
          name: Start application on Cloud.gov and clean routes
          command: |
            cf start $APP_NAME-green
            cf unmap-route $APP_NAME-green $APP_DOMAIN -n $APP_NAME-green
            cf delete-route app.cloud.gov -n $APP_NAME-green -f
      - aws-s3/sync:
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
          aws-access-key-id: CF_DEV_S3_ACCESS_KEY
          aws-region: CF_DEV_S3_REGION
          aws-secret-access-key: CF_DEV_S3_SECRET_KEY
          from: server/app/public/data
          to: 's3://$CF_DEV_S3_BUCKET_ID/data'
      - run:
          name: Re-route green to blue and then remove blue
          command: |
            cf map-route $APP_NAME-green $APP_DOMAIN -n $APP_NAME
            cf unmap-route $APP_NAME $APP_DOMAIN -n $APP_NAME
            cf stop $APP_NAME
            cf delete $APP_NAME -f
            cf rename $APP_NAME-green $APP_NAME
  
  stage-branch:
    working_directory: ~/project/app # directory where steps will run
    docker:
      - image: cimg/node:18.7.0
    resource_class: large
    environment:
      APP_NAME: mywaterway-stage
      APP_NAME_ATTAINS: mywaterway-attains
      APP_DOMAIN: app.cloud.gov
    steps:
      - checkout:
          path: ~/project
      - run:
          name: install python
          command: |
            sudo apt-get update
            sudo apt-get install python3.8
            sudo apt-get install python3.8-venv
      - run:
          name: set python to python3
          command: 'sudo apt-get install python-is-python3'
      - run:
          name: check python version
          command: 'python --version'
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - run:
          name: Check npm version
          command: |
            npm --version
      - run:
          name: Check node version
          command: |
            node --version
      - run:
          name: client build
          command: |
            cd client
            npm install --legacy-peer-deps
            npm run build
      - run:
          name: server build 
          command: |
            cd server
            npm install
            cd app
            cd public
            cp -a ../../../client/build/. .
            rm -rf previous
      - run:
          name: Setup Cloud Foundry CLI
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
            cf api https://api.fr.cloud.gov  
            cf auth "$CF_USER_STAGING" "$CF_PASSWORD_STAGING"
            cf target -o "$CF_ORG" -s "$CF_SPACE_STAGING"
      - run:
          name: Deploy application to Cloud.gov
          command: |
            cd server
            cf push --no-start $APP_NAME-green -f ../manifest-staging.yml -p . -n $APP_NAME-green 
            cf set-env $APP_NAME-green GLOSSARY_AUTH "$GLOSSARY_AUTH"
            cf set-env $APP_NAME-green HMW_BASIC_USER_NAME "$HMW_BASIC_USER_NAME"
            cf set-env $APP_NAME-green HMW_BASIC_USER_PWD "$HMW_BASIC_USER_PWD"
      - run:
          name: Start application on Cloud.gov and clean routes
          command: |
            cf start $APP_NAME-green
            cf unmap-route $APP_NAME-green $APP_DOMAIN -n $APP_NAME-green
            cf delete-route app.cloud.gov -n $APP_NAME-green -f
      - aws-s3/sync:
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
          aws-access-key-id: CF_STAGE_S3_ACCESS_KEY
          aws-region: CF_STAGE_S3_REGION
          aws-secret-access-key: CF_STAGE_S3_SECRET_KEY
          from: server/app/public/data
          to: 's3://$CF_STAGE_S3_BUCKET_ID/data'
      - run:
          name: Re-route green to blue and then remove blue
          command: |
            cf map-route $APP_NAME-green $APP_DOMAIN -n $APP_NAME
            cf unmap-route $APP_NAME $APP_DOMAIN -n $APP_NAME
            cf stop $APP_NAME
            cf delete $APP_NAME -f
            cf rename $APP_NAME-green $APP_NAME
      - run:
          name: Zip and then store artifacts
          command: |
            tar -czf hmwv2.tar.gz server      
      - store_artifacts:
          path: hmwv2.tar.gz
      - run:
          name: Copy ATTAINS NCC endpoints over 
          command: |
            cd server/app/public/data/config
            cp -rf services-attains.json services.json
      - run:
          name: Deploy ATTAINS version of application to Cloud.gov
          command: |
            cd server
            cf push --no-start $APP_NAME_ATTAINS-green -f ../manifest-attains.yml -p . -n $APP_NAME_ATTAINS-green 
            cf set-env $APP_NAME_ATTAINS-green GLOSSARY_AUTH "$GLOSSARY_AUTH"
            cf set-env $APP_NAME_ATTAINS-green HMW_BASIC_USER_NAME "$HMW_BASIC_USER_NAME"
            cf set-env $APP_NAME_ATTAINS-green HMW_BASIC_USER_PWD "$HMW_BASIC_USER_PWD"
      - run:
          name: Start application on Cloud.gov and clean routes
          command: |
            cf start $APP_NAME_ATTAINS-green
            cf unmap-route $APP_NAME_ATTAINS-green $APP_DOMAIN -n $APP_NAME_ATTAINS-green
            cf delete-route app.cloud.gov -n $APP_NAME_ATTAINS-green -f
      - aws-s3/sync:
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
          aws-access-key-id: CF_ATTAINS_STAGE_S3_ACCESS_KEY
          aws-region: CF_ATTAINS_STAGE_S3_REGION
          aws-secret-access-key: CF_ATTAINS_STAGE_S3_SECRET_KEY
          from: server/app/public/data
          to: 's3://$CF_ATTAINS_STAGE_S3_BUCKET_ID/data'
      - run:
          name: Re-route green to blue and then remove blue
          command: |
            cf map-route $APP_NAME_ATTAINS-green $APP_DOMAIN -n $APP_NAME_ATTAINS
            cf unmap-route $APP_NAME_ATTAINS $APP_DOMAIN -n $APP_NAME_ATTAINS
            cf stop $APP_NAME_ATTAINS
            cf delete $APP_NAME_ATTAINS -f
            cf rename $APP_NAME_ATTAINS-green $APP_NAME_ATTAINS
workflows:
  version: 2
  main:
    jobs:
      - develop-branch:
          filters:
            branches:
              only: develop
      - stage-branch:
          filters:
            branches:
              only: staging